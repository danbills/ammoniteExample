include required(classpath("application.conf"))

google {

  application-name = "cromwell"

  auths = [
    {
      name = "application-default"
      scheme = "application_default"
    }
  ]
}

engine {
  filesystems {
    gcs {
      auth = "application-default"
      project = "broad-dsde-cromwell-perf"
    }
  }
}


call-caching {
  # Allows re-use of existing results for jobs you've already run
  # (default: false)
  enabled = true

  # Whether to invalidate a cache result forever if we cannot reuse them. Disable this if you expect some cache copies
  # to fail for external reasons which should not invalidate the cache (e.g. auth differences between users):
  # (default: true)
  invalidate-bad-cache-results = true
}

system.io.number-of-requests = 10240611
system.input-read-limits.lines = 500000

backend {
  default = "Papi"
  enabled = ["Papi"]
  providers {
    Papi {
      actor-factory = "cromwell.backend.google.pipelines.v2alpha1.PipelinesApiLifecycleActorFactory"
      config {
        project = "broad-dsde-cromwell-perf"
        root = "gs://cromwell-perf-test/"
        maximum-polling-interval = 600
        concurrent-job-limit = 1000

        genomics {
          auth = "application-default"
          endpoint-url = "https://genomics.googleapis.com/"
        }

        filesystems {
          gcs {
            auth = "application-default"
            project = "broad-dsde-cromwell-perf"
          }
        }
      }
    }
  }
}

services {
  Instrumentation {
    # StatsD - Send metrics to a StatsD server over UDP
    class = "cromwell.services.instrumentation.impl.statsd.StatsDInstrumentationServiceActor"
    config.statsd {
      hostname = 35.194.33.189
      port = 8125
      prefix = "db-perf"
      flush-rate = 5 seconds # rate at which aggregated metrics will be sent to statsd
    }
  }
}

database {
  profile = "slick.jdbc.HsqldbProfile$"
  db {
	driver = "org.hsqldb.jdbcDriver"
	url = "jdbc:hsqldb:file:metadata;shutdown=false;hsqldb.tx=mvcc"
	connectionTimeout = 20000
  }
}
